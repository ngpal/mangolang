program        = (statement line_end)*;

statement      = vardef | assignment | expr;
line_end       = ";" | "\n";

vardef         = "var" ident [typedef] "=" expr;
typedef        = ":" ident;

assignment     = ident "=" expr;

expr           = if_expr;

if_expr        = "if" logic "{" program "}"
                ("else" "if" logic "{" program "}")*
                ["else" "{" program "}"]
               | logic;

logic          = bitwise (logic_op bitwise)*;
logic_op       = "&&" | "||";

bitwise        = equality (bitwise_op equality)*;
bitwise_op     = "&" | "|" | "^";

equality       = relational (eq_op relational)*;  
eq_op          = "==" | "!=";

relational     = additive (rel_op additive)*;     
rel_op         = ">" | "<" | ">=" | "<=";

additive       = multiplicative (add_op multiplicative)*;
add_op         = "+" | "-";

multiplicative = shift (mult_op shift)*;
mult_op        = "*" | "/";

shift          = unary (shift_op unary)*;
shift_op       = "<<" | ">>";

unary          = (add_op | "!" | "~") unary | atom;

atom           = int | ident | bool | "(" expr ")";

bool           = "true" | "false";

ident          = (alpha | "_") (alphanum | "_")*;
int            = digit+;

alphanum       = digit | alpha;
digit          = "0".."9";
alpha          = ("a".."z" | "A".."Z");
